{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "f0316d83-022c-3756-af33-393f4370b87b",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "d22a4965-52f7-3d4e-b176-5e6fab40bcf3",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "4635ff3b-135e-3d7f-a545-8d01d9ae3793",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "ff911703-596b-315a-9a72-e3899fe149e9",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "837123c0-3e1a-30ba-9a1d-675a3ad7ca24",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "b1b56521-5158-330a-a028-e3451e2458f3",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "35b3f628-9b1d-3482-8fa1-786bbe5ea7f5",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "328badac-9b68-3fb1-8cd1-39b05c8db5c5",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "8690581e-a953-33d8-bcbd-c3771f0f88f9",
              "name": "resources.rules.prefer-apt-get",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-apt-get"
              },
              "fullDescription": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3027](https://github.com/hadolint/hadolint/wiki/DL3027)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-apt-get"
                ]
              }
            },
            {
              "id": "2566f2bd-e933-38d8-a497-a80728bfda22",
              "name": "resources.rules.missing-image-version",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-image-version"
              },
              "fullDescription": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Images should be tagged with an explicit version to produce deterministic container images.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Images should be tagged with an explicit version to produce deterministic container images.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3006](https://github.com/hadolint/hadolint/wiki/DL3006)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-image-version"
                ]
              }
            },
            {
              "id": "d3d12d89-1df0-3af1-bf8d-8e9d68e06c05",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "feb63000-fb18-3a39-8af5-2c0f02aef6fd",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "de814b3b-306c-3227-b7d7-30707bbbee8e",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "53fb6548-17cc-39b3-a747-d88f18a00014",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "7f17c3b5-ffe2-35e1-b038-2848b945a674",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2bed2b48-c43d-3cf0-b89d-9a3ac5dc3c6d",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "34122146-afbe-327f-b185-6bc35e7d4662",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "2c7c6e49-3116-35c6-9a2e-dd87c12a7b08",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "ea9c54b7-5867-3d91-be76-852dcc796c57",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "71ce088b-ce96-3b01-bd40-2eebd42a0b2c",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "c3e578c9-3d7c-3e35-a3b1-9802176af9f3",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "4ae31740-0c61-3f14-af1a-daadec8f0a3d",
              "name": "resources.rules.prefer-copy-over-add",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.prefer-copy-over-add"
              },
              "fullDescription": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://snyk.io/blog/10-docker-image-security-best-practices/](https://snyk.io/blog/10-docker-image-security-best-practices/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.prefer-copy-over-add"
                ]
              }
            },
            {
              "id": "7d5bdd09-fb50-334b-8213-623dc2f236d2",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "d9699616-9b32-34c2-b613-f45523196b47",
              "name": "resources.rules.open-never-closed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.open-never-closed"
              },
              "fullDescription": {
                "text": "file object opened without corresponding close"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "file object opened without corresponding close\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "file object opened without corresponding close\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.open-never-closed"
                ]
              }
            },
            {
              "id": "1c1eb4da-5cd3-3beb-995a-00cd91088a2b",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "c56037be-8914-3463-ba82-90533b0a5128",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "30e9a07c-4ffa-31c1-98b3-aca6c300394b",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "e0c23c9a-3b21-39ae-86ad-9d9249c5eae2",
              "name": "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
              },
              "fullDescription": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning",
              "help": {
                "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.automatic-memory-pinning.automatic-memory-pinning)\n - [https://pytorch.org/docs/stable/data.html#memory-pinning](https://pytorch.org/docs/stable/data.html#memory-pinning)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.automatic-memory-pinning.automatic-memory-pinning"
                ]
              }
            },
            {
              "id": "2cfbc209-d820-3a77-ae0e-ad355362a7f9",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "35cab923-1dd5-3d36-b38b-23ba8471ff91",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "cfd3fc8e-554e-3ac1-8780-d9604ff62a17",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "a50942c5-190c-34b4-8db0-ba31642d8efb",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "14049c51-7a69-30eb-991a-3d63e1367c0b",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "2a8960b1-f757-3edf-933a-6536a2c6f954",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "82b733d4-7fa9-3e1a-a33a-413fc1279b72",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "75f20de2-27af-33a8-beff-a6c8c6a559cf",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "24574953-4144-39f7-927d-f65335da19c0",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "3f15c9ea-3ba7-344f-88e2-9e896738ed37",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "464b0b97-bae1-3de4-88c4-11d30c4fd5e5",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "5b563650-deac-3755-bcd0-c4e701a87805",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "e364ca78-f5d3-39d0-af32-289b321d3eb1",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "bc748ccd-1bd4-34f5-9f68-28f416afcd33",
              "name": "resources.rules.pass-body-range",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-range"
              },
              "fullDescription": {
                "text": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of for $X in $Y. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-range"
                ]
              }
            },
            {
              "id": "c8f4bfc3-e17f-3ae5-9905-e7c97b7c600d",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "f7d59fd2-bc21-3edf-bcf0-5396c76e6be7",
              "name": "resources.rules.eqeq-is-bad",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.eqeq-is-bad"
              },
              "fullDescription": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected a useless comparison operation `$X == $X` or `$X != $X`. This\noperation is always true.\nIf testing for floating point NaN, use `math.isnan`, or\n`cmath.isnan` if the number is complex.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.eqeq-is-bad"
                ]
              }
            },
            {
              "id": "02ffbaea-4193-3bd2-aba8-fa324ee4769c",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "bbd16c84-c733-3b3c-b9f9-0acb6051c1d0",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "c8eb6f69-109f-3b0c-b42b-6d2970292586",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "af6d1d3f-1302-355d-b4a5-68d4da58f6ed",
              "name": "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
              },
              "fullDescription": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules",
              "help": {
                "text": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Usage of NumPy library inside PyTorch `$MODULE` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules)\n - [https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects](https://tanelp.github.io/posts/a-bug-that-plagues-thousands-of-open-source-ml-projects)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.numpy-in-pytorch-modules.numpy-in-pytorch-modules"
                ]
              }
            },
            {
              "id": "95c5c9ed-3aef-3f64-98de-955bd4d2993e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0d575e8a-3b68-3f77-8bbc-31a8abcbb392",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f54f355e-4197-374f-a97a-1c27d57db34e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f98af030-0b21-3ce6-a9b7-6a2bc5e80329",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8f4dead2-4c75-3cd2-a6a4-e387f4e00459",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d67c290a-c68e-3e3e-b27f-6b75be403bbc",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "37e4378f-817e-3465-958b-ee890bbc1e87",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "d14adb8f-062b-3fd3-95f6-e715fbd8d065",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "355399bc-5b94-3d6e-81ec-f10bc8ed2296",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "5946c876-4074-34f5-8584-c6b8de928f7e",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "ee44ec54-12ac-3963-a737-fbecf551477b",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "0132f18d-3a70-372c-abf9-0d5010ea839d",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "deabe197-cec0-35f8-b6d2-84ae7f90b0e2",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "ed307c26-a0cf-30b1-b1c8-5cef44587381",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "d90e1fa6-dcec-3011-9a62-3c0f65d51bde",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "9fd2dd90-c684-3947-8fe8-c48f965fd853",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "fb473763-8412-35ba-865a-7b8fecfaed79",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "067e25db-2315-392b-a6c1-c80413369b74",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "9631f6f4-6165-3a07-8a1e-f98799fefe95",
              "name": "resources.rules.arbitrary-sleep",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.arbitrary-sleep"
              },
              "fullDescription": {
                "text": "time.sleep() call; did you mean to leave this in?"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "time.sleep() call; did you mean to leave this in?\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "time.sleep() call; did you mean to leave this in?\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.arbitrary-sleep"
                ]
              }
            },
            {
              "id": "3e8f4c94-6327-3da7-8382-c5aca9314abf",
              "name": "resources.rules.pass-body-fn",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.pass-body-fn"
              },
              "fullDescription": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`pass` is the body of function $X. Consider removing this or raise NotImplementedError() if this is a TODO\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.pass-body-fn"
                ]
              }
            },
            {
              "id": "69dac3b8-0e9e-30f2-9ceb-7914cd83211a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "7dfda066-61fe-361f-9c76-876f898cac22",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "6bd11e16-01a3-37bf-8b0b-ca9e154e80f1",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "5941efe1-33de-304f-8134-ac48b400a616",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "b2426f79-d616-3130-bfbe-dcb9d6f45cb8",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "e422f602-d0a8-3f18-bcd1-d5c0a66fdfad",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "23e625f3-9d44-385b-a1e6-bdaec739699a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "61347382-acc5-3e08-88a2-c00ca2903ad3",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "9d04feee-a07f-3a59-87d4-fe9643bacf11",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ed05c7ac-fb93-31a2-b4b4-fcbadd5acf0b",
              "name": "resources.rules.raptor-mismatched-memory-management-cpp",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-mismatched-memory-management-cpp"
              },
              "fullDescription": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/762](https://cwe.mitre.org/data/definitions/762)\n - [https://cwe.mitre.org/data/definitions/590](https://cwe.mitre.org/data/definitions/590)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-mismatched-memory-management-cpp"
                ]
              }
            },
            {
              "id": "493600c5-f6ff-38ed-ac00-511e5d3e172e",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "97142155-8671-3d5c-80d3-a46335786bad",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "ffc0526f-9e16-3150-b4f7-fead20e5f533",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "c00bf5d4-9d02-3f15-a939-76a3f46e2f8d",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "8dcb53f5-da9e-311b-aa1d-398532a4e3bd",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "b22b1a9e-a4d8-39c0-adff-babda21dbcca",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "545de47e-8bde-316f-befb-71740e111787",
              "name": "resources.rules.raptor-integer-truncation",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-integer-truncation"
              },
              "fullDescription": {
                "text": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/197](https://cwe.mitre.org/data/definitions/197)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-integer-truncation"
                ]
              }
            },
            {
              "id": "96bbb6b2-6657-3e59-a1c7-8bbd0ecc0cfb",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "bad82533-c50c-30db-9ba7-e79ad37ab567",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "b19ed5b0-cf19-383f-a266-df4bf4499021",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "0de80323-ee12-3959-a7d9-0bad8cebc71d",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "5edb9ad5-d7de-3993-ba03-2b548604059a",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "74786bb8-0c19-33c9-8545-666d9b6952ec",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "3587683e-e833-3996-8d71-9d8a40dc1704",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "b9bbc06d-a3af-32f8-af5a-231cc55f2bdb",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "30646527-4a79-30f1-a97b-ed1301830ac0",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "5db0dede-605b-3a67-8101-803800eac523",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "06208b40-57a3-32f7-80af-00e17af897e2",
              "name": "resources.rules.raptor-signed-unsigned-conversion",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-signed-unsigned-conversion"
              },
              "fullDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://cwe.mitre.org/data/definitions/195](https://cwe.mitre.org/data/definitions/195)\n - [https://cwe.mitre.org/data/definitions/196](https://cwe.mitre.org/data/definitions/196)\n - [https://cwe.mitre.org/data/definitions/194](https://cwe.mitre.org/data/definitions/194)\n - [https://cwe.mitre.org/data/definitions/191](https://cwe.mitre.org/data/definitions/191)\n - [https://cwe.mitre.org/data/definitions/681](https://cwe.mitre.org/data/definitions/681)\n - [https://cwe.mitre.org/data/definitions/789](https://cwe.mitre.org/data/definitions/789)\n - [https://g.co/kgs/PCHQjJ](https://g.co/kgs/PCHQjJ)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n - [https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf](https://www.sei.cmu.edu/downloads/sei-cert-c-coding-standard-2016-v01.pdf)\n - [http://www.phrack.org/issues/60/10.html#article](http://www.phrack.org/issues/60/10.html#article)\n - [https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples](https://docs.microsoft.com/en-us/cpp/sanitizers/asan-error-examples)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-signed-unsigned-conversion"
                ]
              }
            },
            {
              "id": "ec39a4dd-bd2a-389b-a6cd-21d2b2bb6ad6",
              "name": "resources.rules.raptor-suspicious-assert",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.raptor-suspicious-assert"
              },
              "fullDescription": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://legends2k.github.io/note/assert_vs_if/](https://legends2k.github.io/note/assert_vs_if/)\n - [https://github.com/struct/mms](https://github.com/struct/mms)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.raptor-suspicious-assert"
                ]
              }
            },
            {
              "id": "d99b0a83-e1a1-3d1b-a04f-81a3cc3f24fa",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "09d8b80e-63c8-3a4f-8970-52259269ffde",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "16cadda3-b640-32e7-9d80-68d75fbad17a",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "00373b80-2d2e-3ba2-ab5c-0dd0338997c8",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "ccfde452-d9d9-302f-b4a3-67e438b45ff2",
              "name": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "help": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                ]
              }
            },
            {
              "id": "2a9940f4-f3d6-31eb-9fbb-743e51a2ae1b",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "39a64bab-be74-3b35-8692-f0f851ecdb7e",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "d8664017-5468-367c-a573-eef00e37e045",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "f9da490c-692e-382a-b43e-3b6048057f2c",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "59813790-a0a6-3042-a796-cab236af8a0a",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "62bcd739-2363-3312-a742-fbf16329d994",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "3d89c1a6-500e-3516-aa65-b8024647dcf1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f34c5d20-f627-3724-845b-074abe329b70",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "315e6876-6399-3fd6-8b62-e5b624c94f16",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0872d65e-92be-3cba-8e46-c043e48cbb67",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "9ee4d842-600e-330f-89c0-35359396aa78",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e6296b2f-c5bc-3f3f-8adc-1633bfdf2cf5",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f48c2162-cd1c-3bd9-9a04-bfccb29100f2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "fa1870ff-e9d0-33da-88c1-7f646337b388",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "41a429ee-dfec-362d-a153-a171aca9aeea",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "a80d3129-08a2-32a2-b964-b078240accbd",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8aa4387b-015e-33ea-bb99-1f7f1c9a3828",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "19b0a48a-0960-3d79-89d1-9046831c919b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "decc8a5c-9e79-3bf4-b69b-a461ddd161b1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1745dd05-13d6-31ec-b38c-e7311e566851",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "47a8c802-374e-37b0-ab4f-9a2ef4b73c88",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "40b0c0fd-be77-3c84-a3df-1209e50567c1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "648a7a3f-a3eb-3d89-82cc-07695263fc3a",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "1c1b3062-50dd-3ef9-ab35-3aa738b6b62f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8a6edcca-434d-34d3-bcf4-e65bd3f0e628",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ca6060ae-e263-351e-a2ad-0d1d48676e22",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "57953ff9-cd6c-35b7-a859-30790f5e6b5b",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "cade9b73-d729-3c3c-b9b3-6b5d0573e065",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "4cd3e327-b1f5-3f1e-97b7-82f9da2025c5",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "0ce42319-94e4-3d3a-9cc4-4b30a74cd3e0",
              "name": "resources.rules.remove-package-cache",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.remove-package-cache"
              },
              "fullDescription": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3009](https://github.com/hadolint/hadolint/wiki/DL3009)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.remove-package-cache"
                ]
              }
            },
            {
              "id": "4638c366-33b5-3ce8-9e27-64b460c546fe",
              "name": "resources.rules.use-workdir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-workdir"
              },
              "fullDescription": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3003](https://github.com/hadolint/hadolint/wiki/DL3003)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-workdir"
                ]
              }
            },
            {
              "id": "5e47af5a-b30d-3a17-9ef3-284bdc3373c8",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "6596803b-98a9-3ee5-86a4-c31c3f8f1e67",
              "name": "resources.rules.missing-pip-no-cache-dir",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-pip-no-cache-dir"
              },
              "fullDescription": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "note"
              },
              "help": {
                "text": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "This '$PIP install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/hadolint/hadolint/wiki/DL3042](https://github.com/hadolint/hadolint/wiki/DL3042)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-pip-no-cache-dir"
                ]
              }
            },
            {
              "id": "246c2f46-1f7e-3afa-8360-18a0ee879b2d",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "392a1dbc-9f0e-3280-a0e1-13c5be685283",
              "name": "resources.rules.dangerous-system-call",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-system-call"
              },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-system-call"
                ]
              }
            },
            {
              "id": "c12a1b9b-1b7a-345e-9327-adcf5f86d968",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "3bf7f541-b35a-3815-93c2-c07f51f5a326",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "25c3efec-7b26-3cdb-b1c7-9bbd935ec7da",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "8166de8c-1399-3199-ba3f-ae2ec7007a5a",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "35fbb675-1944-3502-a7de-5603340ddc84",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "6e9225fe-d3a2-3c1c-b2eb-4e0fa84a0ec1",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "90e08b17-da73-3680-a559-8743bdd0b7b2",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "825d3fa7-154b-38c4-93b0-726d9bb7e8f5",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "02133fb5-263c-350d-9e5a-82b9cc51b44e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "681b57f6-2d34-3c7d-8b6c-8077858cfbb1",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "8a63af58-973a-3959-af14-93a4a5174aac",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "7bfa5fa9-5e5d-3cd5-bc62-0e3af3f10fa3",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "858e3efe-d43c-3d0f-8a64-927595185e1b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "07da125a-bee1-3578-84cc-eb8e02f2201d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "16495f9a-effe-3a06-95c3-54b7ddfaeb57",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "6ca8dd61-ee3b-3f58-9c10-9ce78cdd045e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "af8a3bc4-10f0-3f30-a22f-f522b77c7f2d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "148917ae-fccd-3530-bf3d-f10ba0a3570a",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "51958fbd-fae0-39e4-9f5d-f2514e395772",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "aa3da0ac-1874-3d22-9a9e-e193008ce9b8",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d7e96ba4-e232-3d67-bce3-c7dd475a4f07",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "bcd05f45-d254-3161-aab2-ad946950ce30",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "fede1c29-e417-3aa8-aa50-8a569a96bb2f",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c61ceb7b-20dc-3ca7-9650-0967334c72bc",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "b824a02e-c6c0-3222-9cc7-0011cb295478",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "23d31d2a-f1bc-3143-8108-533eb209ad64",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "17ff6cef-dbf3-3c88-8fe3-a9aeabf624c0",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "0991ab5a-88be-3f94-b34e-8e791c119126",
              "name": "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "shortDescription": {
                "text": "Opengrep Finding: trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
              },
              "fullDescription": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "helpUri": "https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch",
              "help": {
                "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/trailofbits.python.pickles-in-pytorch.pickles-in-pytorch)\n - [https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/](https://blog.trailofbits.com/2021/03/15/never-a-dill-moment-exploiting-machine-learning-pickle-files/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "trailofbits.python.pickles-in-pytorch.pickles-in-pytorch"
                ]
              }
            },
            {
              "id": "ce7b9781-ecb5-317d-9eba-869de78c46d4",
              "name": "resources.rules.use-raise-for-status",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-raise-for-status"
              },
              "fullDescription": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status](https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-raise-for-status"
                ]
              }
            },
            {
              "id": "0084d112-124c-3ef2-859f-118417381ab3",
              "name": "resources.rules.insecure-hash-algorithm-md5",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-hash-algorithm-md5"
              },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://tools.ietf.org/html/rfc6151](https://tools.ietf.org/html/rfc6151)\n - [https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision](https://crypto.stackexchange.com/questions/44151/how-does-the-flame-malware-take-advantage-of-md5-collision)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-hash-algorithm-md5"
                ]
              }
            },
            {
              "id": "33a03276-d141-3639-86fc-eb3632709b76",
              "name": "resources.rules.insecure-tarfile-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.insecure-tarfile-use"
              },
              "fullDescription": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.insecure-tarfile-use"
                ]
              }
            },
            {
              "id": "d8187002-dbc0-3b1d-8a60-345f6a787426",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "02c0d803-7eee-3423-8eab-d7e7ff5ec27d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "f0316d83-022c-3756-af33-393f4370b87b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN git clone https://github.com/NVIDIA/apex && \\\n    cd apex && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0a864f367980042177c5e5cc9554c3435872f93b540313cc5cc549d47a28f87b614c38b4ce37995f0aef41109a9032e093a1ef0c0a0261629a22ada4e3d53836_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d22a4965-52f7-3d4e-b176-5e6fab40bcf3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN apt update && apt install -y vim git"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "20035bb0d6bac16c351e54f0ce5b2b52b3bda3fb26eaeb112b282d850904ae424fc65b5f16bf1be76731d7080460664129388a703cd37122f9ab841c73862f93_1"
          },
          "properties": {}
        },
        {
          "ruleId": "4635ff3b-135e-3d7f-a545-8d01d9ae3793",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 1,
                  "endLine": 6,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "20035bb0d6bac16c351e54f0ce5b2b52b3bda3fb26eaeb112b282d850904ae424fc65b5f16bf1be76731d7080460664129388a703cd37122f9ab841c73862f93_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ff911703-596b-315a-9a72-e3899fe149e9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 13,
                  "snippet": {
                    "text": "FROM pytorch/pytorch:1.11.0-cuda11.3-cudnn8-devel"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d4305c757528e74385e8987c20df940bf16803fcfe0a4a2d59ace9ab8f91d60f914ed5501f9b91ad595f54309077e98adda08f5c0e50d27b90633d94bb711aa9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "837123c0-3e1a-30ba-9a1d-675a3ad7ca24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "endLine": 18,
                  "endColumn": 21,
                  "snippet": {
                    "text": "RUN pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu113/torch1.11.0/index.html"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9f38d60c06100a7b224adabc57e7d39c65913f53e29779d4e5db19c917acc9cf300247d84291da061381c914c960bef9a29555043c7a141d7e79fddcc1d49fb3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b1b56521-5158-330a-a028-e3451e2458f3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "RUN pip install matplotlib seaborn"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1024e89efbd9de54de0cf668f862b7d300745664d7d8b05407e6d5c0ac2e8c43481aa8e3c8cb4fc6c3f9d2206765a68c073b5e0f91236454c4f525445f3a7d92_0"
          },
          "properties": {}
        },
        {
          "ruleId": "35b3f628-9b1d-3482-8fa1-786bbe5ea7f5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 21,
                  "snippet": {
                    "text": "RUN pip install DALL-E timm einops decord nvtx scipy"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8ef6c14e813efabd2a2e5519c81c5ecbfe272b18ef884a299802539592d31705f0a4ddeeb1ab53c8c5dd0fe005bb2192daee7df6026e8b39137176c95f8e199_0"
          },
          "properties": {}
        },
        {
          "ruleId": "328badac-9b68-3fb1-8cd1-39b05c8db5c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "endLine": 24,
                  "endColumn": 8,
                  "snippet": {
                    "text": "RUN apt install -y libgl1 libglib2.0-0"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "20035bb0d6bac16c351e54f0ce5b2b52b3bda3fb26eaeb112b282d850904ae424fc65b5f16bf1be76731d7080460664129388a703cd37122f9ab841c73862f93_2"
          },
          "properties": {}
        },
        {
          "ruleId": "8690581e-a953-33d8-bcbd-c3771f0f88f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'apt-get' is preferred as an unattended tool for stability. 'apt' is discouraged."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.cuda",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "endLine": 26,
                  "endColumn": 10,
                  "snippet": {
                    "text": "# RUN apt update && apt install -y nsight-systems-2021.2.4"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "20035bb0d6bac16c351e54f0ce5b2b52b3bda3fb26eaeb112b282d850904ae424fc65b5f16bf1be76731d7080460664129388a703cd37122f9ab841c73862f93_3"
          },
          "properties": {}
        },
        {
          "ruleId": "2566f2bd-e933-38d8-a497-a80728bfda22",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Images should be tagged with an explicit version to produce deterministic container images."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.rocm",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1,
                  "endLine": 2,
                  "endColumn": 10,
                  "snippet": {
                    "text": "FROM rocm/pytorch:rocm5.2_ubuntu20.04_py3.7_pytorch_1.11.0"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cbf61c7740e53cb23358b7995221db7611fd6a6e5f7fbae97623739e984d956deed6388a4625bef130f9fc19e26cdf50e5988796ae12b4b6700d7f596addd82c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d3d12d89-1df0-3af1-bf8d-8e9d68e06c05",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.rocm",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN git clone https://github.com/ROCmSoftwarePlatform/apex && \\\n    cd apex && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "00ec204ae54ceb8152b01f7805a49c9e82d75075a4a741fc92726712f2682c2f53e93dcd8799aa990be336347559535b1ca24d4513e42d94241779086bb17cdc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "feb63000-fb18-3a39-8af5-2c0f02aef6fd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.rocm",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1,
                  "endLine": 4,
                  "endColumn": 21,
                  "snippet": {
                    "text": "RUN pip install DALL-E timm scipy einops decord"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5b09b03f3437c3057ad5dcae5395400f67ddc520298877cc85c9e52893268e11366ccebe292fa26448bbdcb90f833f8589fc169c6c9e016be83a7e88175d7bc6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "de814b3b-306c-3227-b7d7-30707bbbee8e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/bevt/ootb/Dockerfile.rocm",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 27,
                  "snippet": {
                    "text": "RUN pip install matplotlib seaborn"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5a3bb7e41babfeaf57daa876febff251c230aed37be8479eec820bcf83792d86944bd3c3fad2cd89ff2d61753febe032eb817e25b79e5542208d4b95374da307_0"
          },
          "properties": {}
        },
        {
          "ruleId": "53fb6548-17cc-39b3-a747-d88f18a00014",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/cudnn_multihead_attn/multihead_attn_make_ref.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 9,
                  "endLine": 192,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        exit()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ca744cdf3162cf1abdd900b01137753fde52e052d77fb95b1cbd2ad084bef1f4a3020d002d0db581c6fac8ec49479692b5d8de836246aeefd1520845ece7e345_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7f17c3b5-ffe2-35e1-b038-2848b945a674",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*Speed (?P<performance>[0-9]*\\.[0-9]*) samples/s.*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/cvt/ootb/cvt_parser.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 29,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        performance_regex = re.compile(\n            \".*Speed (?P<performance>[0-9]*\\.[0-9]*) samples/s.*\"\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ab766931b0eb7a1d722cdbc59002ccc2a73b81f95d418355dad071cc2e649930bf59ebadc36a2dd4787dfef0b3c841c969057d1fefe4dabd7caf37c8caa1dc43_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2bed2b48-c43d-3cf0-b89d-9a3ac5dc3c6d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/cudnn_multihead_attn/multihead_attn_make_ref.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 9,
                  "endLine": 239,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        exit()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ca744cdf3162cf1abdd900b01137753fde52e052d77fb95b1cbd2ad084bef1f4a3020d002d0db581c6fac8ec49479692b5d8de836246aeefd1520845ece7e345_1"
          },
          "properties": {}
        },
        {
          "ruleId": "34122146-afbe-327f-b185-6bc35e7d4662",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/cvt/ootb/repeat_fake_data.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 13,
                  "endLine": 16,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            os.system(f\"cp {folder}/{c} {folder}/{new_class} -r\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c74d36af0a0feda0020d1562f49f64f0a416482e02bc1b8afe139faff7bb264303a4a6395e2d6547b045cd6c808bb41b4562d5daf9826e408076e2edaad152aa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2c7c6e49-3116-35c6-9a2e-dd87c12a7b08",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/cvt/ootb/repeat_fake_data.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 13,
                  "endLine": 22,
                  "endColumn": 56,
                  "snippet": {
                    "text": "            os.system(f\"rm {folder}/{class_to_del} -r\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c74d36af0a0feda0020d1562f49f64f0a416482e02bc1b8afe139faff7bb264303a4a6395e2d6547b045cd6c808bb41b4562d5daf9826e408076e2edaad152aa_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ea9c54b7-5867-3d91-be76-852dcc796c57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 1,
                  "endLine": 10,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN pip install -r requirements.txt"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1804ad23af762a7259bab245955e92d444e18dfb4523af12dff63debfb7f7bed33177b7c681a5a2d15bd64210fa16d53afc480cd480174ae4d139c1c07fdbd3c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "71ce088b-ce96-3b01-bd40-2eebd42a0b2c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD requirements.txt ."
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8524fc71be1e5634ca2c8e37cb91294f516c82994d391758589d5843964d6e47538ac27de413e5f9c7bcaba4ff8ade6a06415163539473bf90ba017032292204_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c3e578c9-3d7c-3e35-a3b1-9802176af9f3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 1,
                  "endLine": 12,
                  "endColumn": 22,
                  "snippet": {
                    "text": "RUN pip install torch==1.3.1"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4eeaffd389e21c3182deb5f082cc6f02a8d244bee136b0123b6732ac46951b560f09dda3b15214f385f112c1a95761a5a8520c70975e8810b9f8cab8c289728a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4ae31740-0c61-3f14-af1a-daadec8f0a3d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The ADD command will accept and include files from a URL.\nThis potentially exposes the container to a man-in-the-middle attack.\nSince ADD can have this and other unexpected side effects, the use of\nthe more explicit COPY command is preferred.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 1,
                  "endLine": 15,
                  "endColumn": 4,
                  "snippet": {
                    "text": "ADD . ."
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8524fc71be1e5634ca2c8e37cb91294f516c82994d391758589d5843964d6e47538ac27de413e5f9c7bcaba4ff8ade6a06415163539473bf90ba017032292204_1"
          },
          "properties": {}
        },
        {
          "ruleId": "7d5bdd09-fb50-334b-8213-623dc2f236d2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/data_loader_terabyte.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 322,
                  "startColumn": 21,
                  "endLine": 330,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    binary_loader = torch.utils.data.DataLoader(\n        dataset_binary,\n        batch_size=None,\n        shuffle=False,\n        num_workers=0,\n        collate_fn=None,\n        pin_memory=False,\n        drop_last=False,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "59b1bdbdcb1b9df7a2818d1330b6e811043c828b6bdd5b60924b201e227b7e87b6b033f9a357d16438b8e7628d36810128b46c8d310764124cd8d83b0db09a01_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d9699616-9b32-34c2-b613-f45523196b47",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "file object opened without corresponding close"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/data_loader_terabyte.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 9,
                  "endLine": 216,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        self.file = open(data_file, 'rb')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "82d8b8d7045f347a3a3cf8b52c0a8dba635029c64693475463e0d728b605918fd136d748c4a76034412a4d4323c4a79f64638b8b8f746def0e3af3cf468b5c60_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1c1eb4da-5cd3-3beb-995a-00cd91088a2b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/data_loader_terabyte.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 23,
                  "endLine": 351,
                  "endColumn": 6,
                  "snippet": {
                    "text": "    original_loader = torch.utils.data.DataLoader(\n        original_dataset,\n        batch_size=2048,\n        shuffle=False,\n        num_workers=0,\n        collate_fn=collate_wrapper_criteo,\n        pin_memory=False,\n        drop_last=False,\n    )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "59b1bdbdcb1b9df7a2818d1330b6e811043c828b6bdd5b60924b201e227b7e87b6b033f9a357d16438b8e7628d36810128b46c8d310764124cd8d83b0db09a01_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c56037be-8914-3463-ba82-90533b0a5128",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 24,
                  "endLine": 282,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        train_loader = torch.utils.data.DataLoader(\n            train_data,\n            batch_size=mini_batch_size,\n            shuffle=False,\n            num_workers=0,\n            collate_fn=collate_wrapper_criteo,\n            pin_memory=False,\n            drop_last=False,  # True\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e14c2edac26a53d47744e608ddc50b99e805f05860aa0784e3a80cf5471b148dab15461703fb4453a04da415db83d105a12cea02ea840f3888dbdb4ce9db213f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "30e9a07c-4ffa-31c1-98b3-aca6c300394b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 820,
                  "startColumn": 42,
                  "endLine": 820,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    list_sd = list(map(lambda tuple_x_k: tuple_x_k[0], dc))  # x = tuple_x_k[0]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a9b1de2c86183e01fe2c950b4fa9af0654fde1c0e22c6a7aef44b9cb2004166e2038e27302149625b3db794f11b3d9931532d74bd0cecee4d7068bf865c38131_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e0c23c9a-3b21-39ae-86ad-9d9249c5eae2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "If possible, it is better to rely on automatic pinning in PyTorch to avoid undefined behavior and for efficiency"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 23,
                  "endLine": 292,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        test_loader = torch.utils.data.DataLoader(\n            test_data,\n            batch_size=test_mini_batch_size,\n            shuffle=False,\n            num_workers=0,\n            collate_fn=collate_wrapper_criteo,\n            pin_memory=False,\n            drop_last=False,  # True\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e14c2edac26a53d47744e608ddc50b99e805f05860aa0784e3a80cf5471b148dab15461703fb4453a04da415db83d105a12cea02ea840f3888dbdb4ce9db213f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2cfbc209-d820-3a77-ae0e-ad355362a7f9",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_data_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 822,
                  "startColumn": 31,
                  "endLine": 822,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        map(lambda tuple_x_k: tuple_x_k[1] / float(l), dc)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a9b1de2c86183e01fe2c950b4fa9af0654fde1c0e22c6a7aef44b9cb2004166e2038e27302149625b3db794f11b3d9931532d74bd0cecee4d7068bf865c38131_1"
          },
          "properties": {}
        },
        {
          "ruleId": "35cab923-1dd5-3d36-b38b-23ba8471ff91",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1286,
                  "startColumn": 42,
                  "endLine": 1286,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    list_sd = list(map(lambda tuple_x_k: tuple_x_k[0], dc))  # x = tuple_x_k[0]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2c8e1fdd99166d5717b8b7827a0da10318684c286e40accf1788d59cd4942b04ba09729733cd1b6e7fafe8c0be9cc538a7ff3fdb392dfab7923da1814c57033d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cfd3fc8e-554e-3ac1-8780-d9604ff62a17",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 17,
                  "endLine": 596,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                return self.create_sequential_forward_ops()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "56f76ed41245b12bc1ce7b5f9b3a6586ef64a31a602502e62cecdab4bebbd8573b35692a618a385f573911db2fb2ab74762b57cdac212c43409ddfbf19c51619_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a50942c5-190c-34b4-8db0-ba31642d8efb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_data_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1288,
                  "startColumn": 31,
                  "endLine": 1288,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        map(lambda tuple_x_k: tuple_x_k[1] / float(l), dc)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2c8e1fdd99166d5717b8b7827a0da10318684c286e40accf1788d59cd4942b04ba09729733cd1b6e7fafe8c0be9cc538a7ff3fdb392dfab7923da1814c57033d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "14049c51-7a69-30eb-991a-3d63e1367c0b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_caffe2.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 598,
                  "startColumn": 17,
                  "endLine": 598,
                  "endColumn": 58,
                  "snippet": {
                    "text": "                return self.create_parallel_forward_ops()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "56f76ed41245b12bc1ce7b5f9b3a6586ef64a31a602502e62cecdab4bebbd8573b35692a618a385f573911db2fb2ab74762b57cdac212c43409ddfbf19c51619_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2a8960b1-f757-3edf-933a-6536a2c6f954",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `fbgemm_gpu_emb_bag_wrapper` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 455,
                  "startColumn": 33,
                  "endLine": 455,
                  "endColumn": 55,
                  "snippet": {
                    "text": "            self.m_spa_cumsum = np.cumsum([0] + m_spa)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb4e70552ca8220fae9e67a0b692be8d16b82752cd4e4c16a6158dacd9bbb59b312139a835eec3de50278182f244154194b8ef8627d21714ae6272b0f399ecc8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "82b733d4-7fa9-3e1a-a33a-413fc1279b72",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `fbgemm_gpu_emb_bag_wrapper` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 34,
                  "endLine": 464,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        indices_lengths_cumsum = np.cumsum([0] + lengths_list)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bb4e70552ca8220fae9e67a0b692be8d16b82752cd4e4c16a6158dacd9bbb59b312139a835eec3de50278182f244154194b8ef8627d21714ae6272b0f399ecc8_1"
          },
          "properties": {}
        },
        {
          "ruleId": "75f20de2-27af-33a8-beff-a6c8c6a559cf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `DLRM_Net` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 23,
                  "endLine": 529,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            std_dev = np.sqrt(2 / (m + n))  # np.sqrt(1 / m) # np.sqrt(1 / n)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "14915c2cca57d29bca24ae67e45dc2620aae510b0bdf5be647bc85f602944f06ecdd1d52c450e9f9cefec54cd4216143e6d6ec9781e5487bdb6e57b49fb7935f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "24574953-4144-39f7-927d-f65335da19c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `DLRM_Net` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 531,
                  "startColumn": 23,
                  "endLine": 531,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            std_dev = np.sqrt(1 / m)  # np.sqrt(2 / (m + 1))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "14915c2cca57d29bca24ae67e45dc2620aae510b0bdf5be647bc85f602944f06ecdd1d52c450e9f9cefec54cd4216143e6d6ec9781e5487bdb6e57b49fb7935f_1"
          },
          "properties": {}
        },
        {
          "ruleId": "3f15c9ea-3ba7-344f-88e2-9e896738ed37",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `DLRM_Net` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 21,
                  "endLine": 754,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                    np.fromstring(args.loss_weights, dtype=float, sep=\"-\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "408e3a69d5a832f6d97254ade6de79de7523415c36194b9bad3b2ab281c9e2e31a93e13a88b96b2bab6b103d66695040920c2e98d51548c081e8b225602f75f5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "464b0b97-bae1-3de4-88c4-11d30c4fd5e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2032,
                  "startColumn": 28,
                  "endLine": 2032,
                  "endColumn": 55,
                  "snippet": {
                    "text": "                ld_model = torch.load(args.load_model)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b58316e5c77b7b36431140a767213f3d74069c3ac4981656973ad11efd14d0debf7015ea9ad22a19e98a94694cc6cf32bcd6e01baa8a12672b7b38e11e203ff1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5b563650-deac-3755-bcd0-c4e701a87805",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2036,
                  "startColumn": 28,
                  "endLine": 2040,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                ld_model = torch.load(\n                    args.load_model,\n                    map_location=torch.device(\"cuda\")\n                    # map_location=lambda storage, loc: storage.cuda(0)\n                )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b58316e5c77b7b36431140a767213f3d74069c3ac4981656973ad11efd14d0debf7015ea9ad22a19e98a94694cc6cf32bcd6e01baa8a12672b7b38e11e203ff1_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e364ca78-f5d3-39d0-af32-289b321d3eb1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2043,
                  "startColumn": 24,
                  "endLine": 2043,
                  "endColumn": 85,
                  "snippet": {
                    "text": "            ld_model = torch.load(args.load_model, map_location=torch.device(\"cpu\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b58316e5c77b7b36431140a767213f3d74069c3ac4981656973ad11efd14d0debf7015ea9ad22a19e98a94694cc6cf32bcd6e01baa8a12672b7b38e11e203ff1_2"
          },
          "properties": {}
        },
        {
          "ruleId": "bc748ccd-1bd4-34f5-9f68-28f416afcd33",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of for _ in (test_ld if args.inference_only else train_ld). Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2113,
                  "startColumn": 9,
                  "endLine": 2114,
                  "endColumn": 17,
                  "snippet": {
                    "text": "        for _ in (test_ld if args.inference_only else train_ld):\n            pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8befc94a9f81ba5f2e395cecea5a8a661daf2f012d9029921c4c66d10ba2e4897bafa696b5f9aeae002fe40a970ff4d5c411f0d2c3683a920e5bcd2806603e22_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c8f4bfc3-e17f-3ae5-9905-e7c97b7c600d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/dlrm_s_pytorch.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2381,
                  "startColumn": 29,
                  "endLine": 2381,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                            torch.save(model_metrics_dict, args.save_model)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b58316e5c77b7b36431140a767213f3d74069c3ac4981656973ad11efd14d0debf7015ea9ad22a19e98a94694cc6cf32bcd6e01baa8a12672b7b38e11e203ff1_3"
          },
          "properties": {}
        },
        {
          "ruleId": "f7d59fd2-bc21-3edf-bcf0-5396c76e6be7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "output_dir == output_dir is a useless equality check"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/tools/visualize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 942,
                  "startColumn": 8,
                  "endLine": 942,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    if output_dir == \"\":"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a381ea42b65dfbab61b03d5817cfd395bf136ca368aed9312813b312e5bfe5d53f03a8845e1ce8588c960ed8a99aaa53117a719780a6716c5e76b562cd0ec97c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "02ffbaea-4193-3bd2-aba8-fa324ee4769c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/tools/visualize.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1001,
                  "startColumn": 20,
                  "endLine": 1001,
                  "endColumn": 81,
                  "snippet": {
                    "text": "        ld_model = torch.load(args.load_model, map_location=torch.device(\"cpu\"))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6e4af6368f3a337261b17168f53934a0466b3c9ab758cc1c68ef5a93d969da373bf3f50a8ee4343da6ef42a82c170e702d97144a3b676f9a306fe7b1f7a56052_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bbd16c84-c733-3b3c-b9f9-0acb6051c1d0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `QREmbeddingBag` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/tricks/qr_embedding_bag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 36,
                  "endLine": 135,
                  "endColumn": 76,
                  "snippet": {
                    "text": "        self.num_embeddings = [int(np.ceil(num_categories / num_collisions)),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "86e5df4438f51bf6afbd2f5f877a254487160fda013ead7b1893d0ff322f53da1d45385050c1c2076848a826d09c6fbdbb952373dd1faf56b19d137ba474ae35_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c8eb6f69-109f-3b0c-b42b-6d2970292586",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `QREmbeddingBag` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/tricks/qr_embedding_bag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 41,
                  "endLine": 154,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        nn.init.uniform_(self.weight_r, np.sqrt(1 / self.num_categories))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3cccc6174746288578ef6e2d64a14143119280a5ae077234012166db1f4cc548120622842b5900f5ad7115cdffca4a33a29687531433421be13d2496aef77136_1"
          },
          "properties": {}
        },
        {
          "ruleId": "af6d1d3f-1302-355d-b4a5-68d4da58f6ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of NumPy library inside PyTorch `QREmbeddingBag` module was found. Avoid mixing these libraries for efficiency and proper ONNX loading"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/dlrm/ootb/tricks/qr_embedding_bag.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 41,
                  "endLine": 153,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        nn.init.uniform_(self.weight_q, np.sqrt(1 / self.num_categories))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3cccc6174746288578ef6e2d64a14143119280a5ae077234012166db1f4cc548120622842b5900f5ad7115cdffca4a33a29687531433421be13d2496aef77136_0"
          },
          "properties": {}
        },
        {
          "ruleId": "95c5c9ed-3aef-3f64-98de-955bd4d2993e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*INFO \\| train \\| epoch (?P<epoch>[0-9]*).* \\| wps (?P<wps>([1-9]\\.[0-9]*e[+-][0-9]*)|[0-9]*).*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/moe/ootb/moe_parser.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 27,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        epoch_wps_regex = re.compile(\n            \".*INFO \\| train \\| epoch (?P<epoch>[0-9]*).* \\| wps (?P<wps>([1-9]\\.[0-9]*e[+-][0-9]*)|[0-9]*).*\"\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "94a9e9f28facfa818def0f0296218bbe4746661b7948a39280873dfd8dfe8e4b2215eb9c0ce6e000d45503b94cdbf672a15fb024aa73125eb73b9ef343c282fa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0d575e8a-3b68-3f77-8bbc-31a8abcbb392",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*train_batch_size ............. (?P<global_batch_size>[0-9]*).*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/moe/ootb/moe_parser.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 35,
                  "endLine": 19,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        global_batch_size_regex = re.compile(\n            \".*train_batch_size ............. (?P<global_batch_size>[0-9]*).*\"\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6a6d5f9eb39f861d131840732f1ad72b89c07df61facb159d10f33f975d2e2e822594dc69a86a7fadd322ac866bd23290dcb3fdc9c93e16c18112babb8130eda_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f54f355e-4197-374f-a97a-1c27d57db34e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*Actual Train Time: (?P<train_time>[0-9]*\\.[0-9]*).*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/oscar/ootb/oscar_parser.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 28,
                  "endLine": 15,
                  "endColumn": 95,
                  "snippet": {
                    "text": "        train_time_regex = re.compile(\".*Actual Train Time: (?P<train_time>[0-9]*\\.[0-9]*).*\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a80f7db0426db508192e0a6c099977029b82732244bd210b6d405dcd521ff59ef0a23912e5f63049247b8b18cf048317f170bba8a5b89cba7e1b090cd0e8368f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f98af030-0b21-3ce6-a9b7-6a2bc5e80329",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*Epoch: (?P<epoch>[0-9]*), global_step: (?P<global_step>[0-9]*).*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/oscar/ootb/oscar_parser.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 29,
                  "endLine": 18,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        global_step_regex = re.compile(\n            \".*Epoch: (?P<epoch>[0-9]*), global_step: (?P<global_step>[0-9]*).*\"\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a8570cf74a8202ff37610ce24ba2541cd0eec3359b2fc642727cbffbfbf2cdaefc52283761f9b4e812ed68c20b158d059ed440089cbd79c87d90fc833b7b6433_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8f4dead2-4c75-3cd2-a6a4-e387f4e00459",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*Total train batch size.* = (?P<global_batch_size>[0-9]*).*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/oscar/ootb/oscar_parser.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 35,
                  "endLine": 21,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        global_batch_size_regex = re.compile(\n            \".*Total train batch size.* = (?P<global_batch_size>[0-9]*).*\"\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd8a778406cf218a6594e63548c1f9ef08dddcb0a359b55d68e6280bafd619fd4de06e371b84f5559dbcc53ccc8317b1e7af03c0ab5a6fa4179cb505bd47178b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d67c290a-c68e-3e3e-b27f-6b75be403bbc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/benchmark/repro.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 10,
                  "endLine": 34,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  size_t TotalSampleCount() override { return 1000000; }"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0079cef70b18baed421a710f51e3f850c98a518291374f31dd0e949d2d7657b9da3f3da47f768e67555cadfd7c02c00386eb9f5540673e4358f7d27b0d28ec7d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "37e4378f-817e-3465-958b-ee890bbc1e87",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/benchmark/repro.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 3,
                  "endLine": 215,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  assert(argc >= 2 && \"Need to pass in at least one argument: target_qps\");"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e24cef7a736824c99f27d9b6dea6a1d399f2400285b0626ec04f8b9a57a6a9efc1d45f1cb79ad9281f720f60320915887c235c133c3e46a3b1039c2357ce9347_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d14adb8f-062b-3fd3-95f6-e715fbd8d065",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/benchmark/repro.cpp",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 12,
                  "endLine": 118,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    size_t actualSize{0};"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f261da0fdbc2caef70094e307834b5f91c0a4a15b042e82c0126143f123f42107d0ec292fab60e72427148443e22ca498d3776e253ec19905842a7d257c15a9b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "355399bc-5b94-3d6e-81ec-f10bc8ed2296",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/bindings/c_api.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "endLine": 78,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  delete sut_cast;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3af40f8952a9fa6071dbc635fcf0b01f49dbe1693dcafda7b1dfadd4bc8b793f8ea4ba11ac360d0e581e1afe76a76a68bc8092fbfe684d9a3d38f5b5ab91ece4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5946c876-4074-34f5-8584-c6b8de928f7e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/bindings/c_api.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 3,
                  "endLine": 137,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  delete qsl_cast;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f5389f581c0cac49d9162d3301e95e31926c592220d0479dc9a7231e27c0664df1f781a26cd65eb0d218f63a7bb111e6d7723dbfe224cf5185ca2768f6ce8e47_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ee44ec54-12ac-3963-a737-fbecf551477b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/bindings/python_api.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 3,
                  "endLine": 160,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  delete sut_cast;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "38822b5a146c654b01391e4ac3b73935389f0ae9c5fe0c1723e02ca1b25cc58471dd3feb9209d0d5f450487cefe3117823eb4f72d97309b2d797e10dd972aa80_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0132f18d-3a70-372c-abf9-0d5010ea839d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/bindings/python_api.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 3,
                  "endLine": 175,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  delete sut_cast;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "38822b5a146c654b01391e4ac3b73935389f0ae9c5fe0c1723e02ca1b25cc58471dd3feb9209d0d5f450487cefe3117823eb4f72d97309b2d797e10dd972aa80_1"
          },
          "properties": {}
        },
        {
          "ruleId": "deabe197-cec0-35f8-b6d2-84ae7f90b0e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/bindings/python_api.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 3,
                  "endLine": 192,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  delete qsl_cast;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5abe318dcf612f03a9115cc31a06e0bbe9a39e52ac988a05ed1b3fdc71570803b6c8f5344b2a869b30ce420ee9b223c6ca4894ec73f8f768ec5303d80efde56a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ed307c26-a0cf-30b1-b1c8-5cef44587381",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function flush_queries. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_multi_stream_free.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def flush_queries():\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d0d2a3375016c069a6f93245188cff83c9cd35359a1155c008f94175fbca18d14d27167643afab856a1adfeb5dd3deed181fee8d5531f2fbb6d1ad75f545655a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d90e1fa6-dcec-3011-9a62-3c0f65d51bde",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function flush_queries. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_multi_stream.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def flush_queries():\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f3cf6cc5fdd40012aa7affff739849c982deba83afda6e1f5d1c5cdf6f2868e610505812188bca76445ef362ec17fcaa6ae27f142fada6bcf2bd72b7385ebf75_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9fd2dd90-c684-3947-8fe8-c48f965fd853",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function flush_queries. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_offline.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 1,
                  "endLine": 59,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def flush_queries():\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6456941973e1aa86119019a7baaa980f4c61e1dfc792304d30584e4347db8ec5b7f23f442276c104bbf587f942c96714cd96c98a0a32ffcdc5a31558efa46b06_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fb473763-8412-35ba-865a-7b8fecfaed79",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_server.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 5,
                  "endLine": 40,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    time.sleep(.001)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cc9cd070f73faecf0b0e10886442c7312b1c378606061453688f6c32f14403ee6839af8cb90609a6e9c3acff9a245e9a75f2fc792c11ac9f8da45bb94b010e50_0"
          },
          "properties": {}
        },
        {
          "ruleId": "067e25db-2315-392b-a6c1-c80413369b74",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function flush_queries. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_server.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 1,
                  "endLine": 53,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def flush_queries():\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2d82a4bc6fb5299b2cd6e5e3605e22e0e1be8c3f0c0a4928c21b8319b56ac4629730de2817dbe7af575c5eb64f406040b0c02aad43b7a99748cd705c26fd4b04_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9631f6f4-6165-3a07-8a1e-f98799fefe95",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "time.sleep() call; did you mean to leave this in?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_single_stream.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "endLine": 42,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    time.sleep(.001)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4789c544b1f38a33690bdabb5095280a417b611b10ac152f651fb79e6815c8a9c117f7c448f49202c175a318dfce911618f254af4d07a7774db914c45b766877_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3e8f4c94-6327-3da7-8382-c5aca9314abf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`pass` is the body of function flush_queries. Consider removing this or raise NotImplementedError() if this is a TODO"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/demos/py_demo_single_stream.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 9,
                  "snippet": {
                    "text": "def flush_queries():\n    pass"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fe74e28a873d961b4a4dbee03976d73aa2cd121fc1cd212fc2a315acf694425233f38490cff8ff2ac2add7e76c692a443e5e8f207853d45c53c87843e5bbe4c5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "69dac3b8-0e9e-30f2-9ceb-7914cd83211a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 10,
                  "endLine": 72,
                  "endColumn": 73,
                  "snippet": {
                    "text": "  size_t old_count = wait_count_.fetch_sub(1, std::memory_order_relaxed);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "16ef5294950a4b5aa336ea9ef88e073186c7bfe682b60b3fc21b7b6ce6228c43949a2926163027fe00d152ef157f5a58da6e7bd67b3d533182f3ebda21cd88c7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7dfda066-61fe-361f-9c76-876f898cac22",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 10,
                  "endLine": 278,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  size_t thread_idx{0};"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "33b73b0ecb35ddee5a40b9f676ef92dc6cec369333cef9056bf69c37f5903edea154187fc1a47a8f7e93022e830f82b5b94c3588d7b41b6ad6bb907b3dcabf5f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6bd11e16-01a3-37bf-8b0b-ca9e154e80f1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 10,
                  "endLine": 418,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  size_t queries_issued = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "28dc7fe0cc9b3b37940d36f2a2646575b34eec4588952548275661b19683cdd3a915e6fdce028467bcef55286ae756c16cfb941ecdc962b592ee12527d0bf508_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5941efe1-33de-304f-8134-ac48b400a616",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 425,
                  "startColumn": 16,
                  "endLine": 428,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  const size_t min_query_count_for_thread =\n      (thread_idx < (min_query_count % query_stride))\n          ? (min_query_count / query_stride + 1)\n          : (min_query_count / query_stride);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2f617484d7702413b016def789be0f7c65b9c9891fd1e537f13c603b930979edf31fee839244fb6a9058f1f096fdf80fbe5364b3e87541667a4d891515eb9957_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b2426f79-d616-3130-bfbe-dcb9d6f45cb8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 10,
                  "endLine": 419,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  size_t queries_issued_per_iter = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b372de73b5ebd1a51128c8cf80a8ebb138cdb296a535b566beee57986a7119540a0999bbbc18cfd35c341e1266afed1bd8ee112f71c732e891f614e4d88ef66d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e422f602-d0a8-3f18-bcd1-d5c0a66fdfad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 16,
                  "endLine": 433,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  const size_t max_query_count_for_thread =\n      (thread_idx < (max_query_count % query_stride))\n          ? (max_query_count / query_stride + 1)\n          : (max_query_count / query_stride);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2b335c53a2d7a6c62cb06a63f7384bf97c857c44d8ccbcbc336b0a69ac0ebe677f38684cbd284ceb24fe64915070ed2c9c503aadc830f17866c4ce1f32272391_0"
          },
          "properties": {}
        },
        {
          "ruleId": "23e625f3-9d44-385b-a1e6-bdaec739699a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 10,
                  "endLine": 445,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  size_t expected_latencies = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "194efaaf83941f1d172a83db3e747db0b35d3b1d75b069346000915d8a5f7860ef9c03ef3c6028131145330c561495e048dd5d601a02ccd1df986ff8d18899f2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "61347382-acc5-3e08-88a2-c00ca2903ad3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 5,
                  "endLine": 449,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    queries_issued_per_iter = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b372de73b5ebd1a51128c8cf80a8ebb138cdb296a535b566beee57986a7119540a0999bbbc18cfd35c341e1266afed1bd8ee112f71c732e891f614e4d88ef66d_1"
          },
          "properties": {}
        },
        {
          "ruleId": "9d04feee-a07f-3a59-87d4-fe9643bacf11",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/issue_query_controller.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 507,
                  "startColumn": 16,
                  "endLine": 507,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        size_t queries_issued_total{0};"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f399af5bc594419ffca1d4c0c22211b2d6c51b8576080c8764ebb447498737416cb7fb550f4349a37f511e6489817276b0c14b8e6a3400ae31d7c4d1f12a0fe6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ed05c7ac-fb93-31a2-b4b4-fcbadd5acf0b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource. Due to inherent limitations of Semgrep, this rule might generate many false positives and should therefore be customized for your codebase."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/loadgen.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 9,
                  "endLine": 120,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        delete sample_data_copy;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0eb5b96cdf36c50cc21ebd36c7e359fc57d4d583fcfbb0e408839aa4f2b71977e86fede2685e5a31e1d54fe87c6b9a1f5ca60784d3b11653bf23c79d72bebf81_0"
          },
          "properties": {}
        },
        {
          "ruleId": "493600c5-f6ff-38ed-ac00-511e5d3e172e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/loadgen.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 16,
                  "endLine": 234,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  const size_t sample_stride = kIsMultiStream ? samples_per_query : 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ac8b946bbd8925045b969a161a4abee1814967f574b37a8336bd9152bb6f8cd35f1f96fce61f12fef2dcbb142ed61c167143323d7e8a222705fa6d78347665b1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "97142155-8671-3d5c-80d3-a46335786bad",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/loadgen.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 5,
                  "endLine": 579,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    assert(lp.percentile >= 0.0);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "652b7f5683a5758b0b3c1b19c220561b1b420e8a14e298daaf10571a4fda21ee216099ce24641d0d1623e25207cbf77e9484f4106593ec69ce45bfe119f9eb50_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ffc0526f-9e16-3150-b4f7-fead20e5f533",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/loadgen.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 5,
                  "endLine": 580,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    assert(lp.percentile < 1.0);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0039595c693f2ce3de92f30d5eea971c16ea6298613fd6573cd7692ff8186a8599df654ddba1a9508aa0918945a81fa729aa5ba81f23f6fa55fa5e3405e0e998_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c00bf5d4-9d02-3f15-a939-76a3f46e2f8d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/loadgen.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 16,
                  "endLine": 998,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  const size_t set_padding =\n      (settings.scenario == TestScenario::MultiStream ||\n       settings.scenario == TestScenario::MultiStreamFree)\n          ? settings.samples_per_query - 1\n          : 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "66887d6329811b62ed7e4027092cca5e09c8b7b4bde677664721f24fbff2f346cb39497495861cdccc261a3034c3670bef9ec25541e9ef8c144f1d8fa849b41c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8dcb53f5-da9e-311b-aa1d-398532a4e3bd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 18,
                  "endLine": 84,
                  "endColumn": 41,
                  "snippet": {
                    "text": "constexpr size_t kMaxThreadsToLog = 1024;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "809e245ae92ff8322e89cd9993c7d04297b9342dbde04b5f28cdeceb697f67dc7e1facdde692f55b6135f3d535a5c9e7bfe4882984462344d4b5326ae1821f9e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b22b1a9e-a4d8-39c0-adff-babda21dbcca",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 18,
                  "endLine": 89,
                  "endColumn": 50,
                  "snippet": {
                    "text": "constexpr size_t kTlsLogReservedEntryCount = 1024;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ed8eaed3fc47917544ccfb84042fd5b6b392dfa53495813468322bde439c9be351afb244413d271cda0cf48adf44de718c02e79fc9f7fc493f6921502eb574e1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "545de47e-8bde-316f-befb-71740e111787",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Truncation errors occur when a primitive is cast to a primitive of a  smaller size and data is lost in the conversion. The value cannot be  trusted and the application will be in an undefined state."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 8,
                  "endLine": 103,
                  "endColumn": 39,
                  "snippet": {
                    "text": "  char letter = ('A' - 10) + four_bits;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a62742d32e979f9e60d26d7484ca6bf8950c14ff3cc189729faa5ccb4fc44b2012a40c284e01873a532e3d5af63197bc601e6f68200d52c2f0f90f09da2ab025_0"
          },
          "properties": {}
        },
        {
          "ruleId": "96bbb6b2-6657-3e59-a1c7-8bbd0ecc0cfb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 10,
                  "endLine": 422,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  size_t invalid_latency_count = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "623a8cc63a0b297313b41184efb38c0978ded304350d7266855d32aa6ffc61d6d64bb31fb629b26e90db9eb6196b1303ed5dde1ff29bf28f6f565f0a7471ec95_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bad82533-c50c-30db-9ba7-e79ad37ab567",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 529,
                  "startColumn": 16,
                  "endLine": 529,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  const size_t kSlotCount = max_threads_to_log * 2;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "721704c4acf870d9077d45797b2d67da60211e80eb77218cda6ba22194c5d987175f476d66d2f85f55d2f58912bca8d3c630db1302985d5bc1f141f0945ce6f9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b19ed5b0-cf19-383f-a266-df4bf4499021",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 565,
                  "startColumn": 3,
                  "endLine": 565,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  id = swap_request_id_.fetch_add(1, std::memory_order_relaxed);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ecf42693ed44cf783e509abb4ade4b102ddd1477c7726586e712ad4921e6639c824c75210259af1863381a9ac8fa7677e1ff7d1c8f21170187dbdb0bb2b19a96_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0de80323-ee12-3959-a7d9-0bad8cebc71d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 5,
                  "endLine": 570,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    id = swap_request_id_.fetch_add(1, std::memory_order_relaxed);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ecf42693ed44cf783e509abb4ade4b102ddd1477c7726586e712ad4921e6639c824c75210259af1863381a9ac8fa7677e1ff7d1c8f21170187dbdb0bb2b19a96_1"
          },
          "properties": {}
        },
        {
          "ruleId": "5edb9ad5-d7de-3993-ba03-2b548604059a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/logging.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 940,
                  "startColumn": 10,
                  "endLine": 940,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  size_t cas_fail_count = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "539b4a4673e2f0c30d6e8a3261863a1f8fed357d22919ecf3f594db88ebdd277894518a4be3935fd23480110bb91cd04b424c1ba71944b15b2c14c18fb2fd759_0"
          },
          "properties": {}
        },
        {
          "ruleId": "74786bb8-0c19-33c9-8545-666d9b6952ec",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/test_settings_internal.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 5,
                  "endLine": 101,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    assert(lower_bound_settings.samples_per_query <\n           upper_bound_settings.samples_per_query);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3d0d55b060a0be31eff6a7fc31b08488e13969a357370d94e0262486baaf8ee69079073d066b3c564d6b5a05fb849e31f0a26faed19ebacac4044165f478f9a4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3587683e-e833-3996-8d71-9d8a40dc1704",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/test_settings_internal.h",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 5,
                  "endLine": 107,
                  "endColumn": 78,
                  "snippet": {
                    "text": "    assert(lower_bound_settings.target_qps < upper_bound_settings.target_qps);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "53daae527693ec921fc5c1e4ff9fa424c5b8498695499fa0f194553261cb7fc05c449d4d72914ed3e03961c865b63a2a350f245f25d935537375ddf70eb6ed67_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b9bbc06d-a3af-32f8-af5a-231cc55f2bdb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/utils.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 20,
                  "endLine": 47,
                  "endColumn": 42,
                  "snippet": {
                    "text": "  constexpr size_t kDateTimeMaxSize = 256;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f0b49c65f04e0e6a91dbd5f22e281a0748bf90a5283b57767db66f40efe56a4e1986a73a294d13eda2e846ba4565b29d1864b2978d4479fce7ccf90df9442b72_0"
          },
          "properties": {}
        },
        {
          "ruleId": "30646527-4a79-30f1-a97b-ed1301830ac0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 10,
                  "endLine": 27,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  size_t start = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fa1a1a53f7dfbb68cbd02ac2c0a8b83158ca35033bf59c026d130edf39218095a543badb7e40c4cce15dbb5c936c58919d74aefca5208deafec3d66c70e7c926_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5db0dede-605b-3a67-8101-803800eac523",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 10,
                  "endLine": 28,
                  "endColumn": 18,
                  "snippet": {
                    "text": "  size_t next = 0;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6599241ce8694e8f53bfc5ed9c4e763165e9a9a6889afe43d29616ac9ea00375913dc0e5c9b35b416cd6faad1fdb7e8ef2df927766b2d3c3073a2e9e554540a6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "06208b40-57a3-32f7-80af-00e17af897e2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, or uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value. When the result of a function is to be used as a size parameter, using negative return values can have unexpected results. Although less frequent an issue, unsigned-to-signed conversion can be  the precursor to buffer underwrite conditions. Buffer underwrites  occur frequently when large unsigned values are cast to signed values,  and then used as indexes into a buffer or for pointer arithmetic."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 5,
                  "endLine": 32,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    start = next + 1;"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "22db995c9fdc7dcab0a9f1376e6f5621cb69eb91cc8371fa15393a3aff187fd2af5b53c183f4a53027b722a8a2cfbd0b4d1ba0f801b608d67f6995a8c0a69d65_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ec39a4dd-bd2a-389b-a6cd-21d2b2bb6ad6",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Most codebases define assertion macros which compile to a no-op on non-debug builds. If assertions are the only line of defense against untrusted input, the software may be exposed to attacks that leverage the lack of proper input checks."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version.cc",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "endLine": 44,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    assert(hash_and_name.size() > 1);"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ffd8fb721b21bef2e49c9296cba431a0c25c430a874650d447f3fccd1fd0da46a4d9b62fef167a084e238acde09d4398e28d720362338a5eca096947c78ffb6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d99b0a83-e1a1-3d1b-a04f-81a3cc3f24fa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 15,
                  "endLine": 43,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    git_rev = os.popen(git_command + \"rev-parse --short=10 HEAD\").read()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b343109843ee0ba982dcd1b1831e6a3439a49d50de004d4374e9eb71ec39ff179bedb365f4a97599a6a0076cf64614d597eb12fb36209a852a2ea8a7362f7fd0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "09d8b80e-63c8-3a4f-8970-52259269ffde",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 23,
                  "endLine": 44,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    git_commit_date = os.popen(git_command + \"log --format=\\\"%cI\\\" -n 1\").read()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b343109843ee0ba982dcd1b1831e6a3439a49d50de004d4374e9eb71ec39ff179bedb365f4a97599a6a0076cf64614d597eb12fb36209a852a2ea8a7362f7fd0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "16cadda3-b640-32e7-9d80-68d75fbad17a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 18,
                  "endLine": 45,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    git_status = os.popen(git_command + \"status -s -uno\").read()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b343109843ee0ba982dcd1b1831e6a3439a49d50de004d4374e9eb71ec39ff179bedb365f4a97599a6a0076cf64614d597eb12fb36209a852a2ea8a7362f7fd0_2"
          },
          "properties": {}
        },
        {
          "ruleId": "00373b80-2d2e-3ba2-ab5c-0dd0338997c8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 15,
                  "endLine": 47,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    git_log = os.popen(\n        git_command + \"log --pretty=oneline -n 16 --no-decorate\").read()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b343109843ee0ba982dcd1b1831e6a3439a49d50de004d4374e9eb71ec39ff179bedb365f4a97599a6a0076cf64614d597eb12fb36209a852a2ea8a7362f7fd0_3"
          },
          "properties": {}
        },
        {
          "ruleId": "ccfde452-d9d9-302f-b4a3-67e438b45ff2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 18,
                  "endLine": 78,
                  "endColumn": 41,
                  "snippet": {
                    "text": "        sha1s += hashlib.sha1(file_data).hexdigest() + \" \" + fn + \"\\n\""
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c8e8e2191b3900ca9c2ae4ad7eeac9fa19819f29ece6f7232ee7a7494e7a5155e22fcd0ec88d89abc705048e57b709a13439faa075f579f65f52385d6092ab66_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2a9940f4-f3d6-31eb-9fbb-743e51a2ae1b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/loadgen/version_generator.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 18,
                  "endLine": 106,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    git_status = os.popen(git_command + \"status\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b343109843ee0ba982dcd1b1831e6a3439a49d50de004d4374e9eb71ec39ff179bedb365f4a97599a6a0076cf64614d597eb12fb36209a852a2ea8a7362f7fd0_4"
          },
          "properties": {}
        },
        {
          "ruleId": "39a64bab-be74-3b35-8692-f0f851ecdb7e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 23,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN COMMIT_SHA=c6d12f9e1562833c2b4e7ad84cb22aa4ba31d18c && \\\n    git clone https://github.com/HawkAaron/warp-transducer deps/warp-transducer && \\\n    cd deps/warp-transducer && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f913ded585354137cbd7d06918dcbbf8100cb12a2bb2d6221817a2efff3ee9a7c8d9c5eb39f77c7ffc365686ca4f5fcd94171d8707b1439f7efdde59c869b337_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d8664017-5468-367c-a573-eef00e37e045",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 1,
                  "endLine": 44,
                  "endColumn": 26,
                  "snippet": {
                    "text": "RUN pip install --disable-pip-version-check -U -r requirements.txt"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "aa88c08c051f5de4f18c56481c4794f1abb05c701807f337dd580261754cf468f8dbb76db0041a9aa146d6d1ab834521b89714ab333ab56a1adb23b4ed82a33f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f9da490c-692e-382a-b43e-3b6048057f2c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/dataset.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 34,
                  "endLine": 93,
                  "endColumn": 51,
                  "snippet": {
                    "text": "            collate_fn=lambda b: seq_collate_fn(b),"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5f818e3be86cb5a1196394d771dc16e759c4a97c1e1c97e74139b3b45f239070c2878618d6bbda14f19d7a63a70c948666b4aa6295ee763a5678b79f81554bc7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "59813790-a0a6-3042-a796-cab236af8a0a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/manifest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 140,
                  "startColumn": 45,
                  "endLine": 140,
                  "endColumn": 58,
                  "snippet": {
                    "text": "            ids = sorted(ids, key=lambda x: x['duration'])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c4bbcabd3b70d74c9ea528b6ad7f6bce7f8449a3f6fec4df55ed19953e40748431997be55734687723fdab951a2731244a76ef7ce8a2b1d907d0e6d837f0a736_0"
          },
          "properties": {}
        },
        {
          "ruleId": "62bcd739-2363-3312-a742-fbf16329d994",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\s+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 18,
                  "endLine": 38,
                  "endColumn": 36,
                  "snippet": {
                    "text": "_whitespace_re = re.compile(r'\\s+')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b56d92fb5aefece896e00b7f719c4b697c557ccfdbb33f13b62bccd9845cc5bc930fb0205840c91b87e629baa93245475c2540446662913e3547a242fe3e15d5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3d89c1a6-500e-3516-aa65-b8024647dcf1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'\\\\b%s\\\\.' % x[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 20,
                  "endLine": 41,
                  "endColumn": 64,
                  "snippet": {
                    "text": "_abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in ["
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2efb778059454fd7f2fc3ea797b190d1c138f43e5474b3beb733a7cb9f0df8abfe4c0bb991833c650dea7da6bc3156ccf01cc5c370072563e9b80eabb048f115_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f34c5d20-f627-3724-845b-074abe329b70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `regex` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 16,
                  "endLine": 65,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        text = re.sub(regex, replacement, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a1e8c2b59e9a262b6b15d3103a8f2053717252a754a6e5fdf04e39b98c60bc7ff461a88acaee7a39a44d14c6a744acdb1ebe6b7c632ed2479e649839798e2545_0"
          },
          "properties": {}
        },
        {
          "ruleId": "315e6876-6399-3fd6-8b62-e5b624c94f16",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_whitespace_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 12,
                  "endLine": 78,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    return re.sub(_whitespace_re, ' ', text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e93624625cd52c76e0e5d97553f5fba61d2cdae091cdb31d1bfe698f54931d2aae286266c9e254fd0d770262adf056615e9b083eca93f74913fd715d8af36bb8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0872d65e-92be-3cba-8e46-c043e48cbb67",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'&'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 12,
                  "endLine": 87,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    text = re.sub(r'&', \" and \", text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "07cf6071c50303a628abf8da5bd6cfcbd2209ecf322a2b702197af863e041dc205fe16c3ddaf973038bafc012b4b83f04f6efc33f99d40f481f6204e26853767_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9ee4d842-600e-330f-89c0-35359396aa78",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 12,
                  "endLine": 88,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    text = re.sub(r'\\+', \" plus \", text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2fa4096c5cb1a75ceaaa2d29695cecb03ead1593859e617aa3125d235597a75f198a37d9d184084d659efb426e59bc86a60540efdeec6b93970820d4e6e4017c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e6296b2f-c5bc-3f3f-8adc-1633bfdf2cf5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([0-9][0-9\\,]+[0-9])'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 20,
                  "endLine": 24,
                  "endColumn": 55,
                  "snippet": {
                    "text": "_comma_number_re = re.compile(r'([0-9][0-9\\,]+[0-9])')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "75e6530097281c93fdcafa858420edc1805d8424f0b22b667a681d3ddd881a384a55d32bbe5b5068a5e6bdd9634b1f44118fbb78a7b95d9d690537eb2a2573a8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f48c2162-cd1c-3bd9-9a04-bfccb29100f2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([0-9]+\\.[0-9]+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 22,
                  "endLine": 25,
                  "endColumn": 53,
                  "snippet": {
                    "text": "_decimal_number_re = re.compile(r'([0-9]+\\.[0-9]+)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9d4f47eef08dd150fc09cc0687ff6dbc93ec242b6a017ae677eb33ddb79c88c97b8318666a0b77b7ce08e08cc95030d031407760073a9460914a238712afa96f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fa1870ff-e9d0-33da-88c1-7f646337b388",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'Â£([0-9\\,]*[0-9]+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 14,
                  "endLine": 26,
                  "endColumn": 47,
                  "snippet": {
                    "text": "_pounds_re = re.compile(r'Â£([0-9\\,]*[0-9]+)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "719bd6d09cbed5fff01c348272037d69c43675376095c2f5a814c92c6f72eb29c4013067132b99219ab887cf0daeac2e9aa52a515a57d51b4d5f771af1cf113c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "41a429ee-dfec-362d-a153-a171aca9aeea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\$([0-9\\.\\,]*[0-9]+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 27,
                  "endColumn": 50,
                  "snippet": {
                    "text": "_dollars_re = re.compile(r'\\$([0-9\\.\\,]*[0-9]+)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "50fda9b4c975d6ae663ee1210dc64f2c6c90facb01a8d1711ca0e34efd0e605c2655adc64ce81f64c1747287edbbcc370c95277f5df562c90c16c6cf17a38a6f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a80d3129-08a2-32a2-b964-b078240accbd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'[0-9]+(st|nd|rd|th)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 28,
                  "endColumn": 49,
                  "snippet": {
                    "text": "_ordinal_re = re.compile(r'[0-9]+(st|nd|rd|th)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d2c3bad21bd43d80c78135184274dfac491263d4a4721c61b6e9728b41d4dca2943d6498870015e7b311bc46fe569e32698c5eef4916317cb191fde432a4fdd0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8aa4387b-015e-33ea-bb99-1f7f1c9a3828",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'[0-9]+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 14,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "_number_re = re.compile(r'[0-9]+')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f02637e575e5bd5c8e4a630047a04d69be3f29f71d343e1a2f041235c6ade738d378d9541204b0e9650ec29864241fb55c3a2ea3924d089b4c5738419f83dfd4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "19b0a48a-0960-3d79-89d1-9046831c919b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([0-9]{1,2}):([0-9]{2})'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "endLine": 30,
                  "endColumn": 50,
                  "snippet": {
                    "text": "_time_re = re.compile(r'([0-9]{1,2}):([0-9]{2})')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "80ba45fc5e897404acfa4d2935db735b84c7a31f5e29b0cc6b418442bfe38c2565652425fbb13067759bd04bff17b50f7fb3fb27f98f214817f6005091a89b3d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "decc8a5c-9e79-3bf4-b69b-a461ddd161b1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_comma_number_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    text = re.sub(_comma_number_re, _remove_commas, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "aa50b24e6a9f747497fba642ac4ee8f866750fd7fc0cb1f3a5ef9bf05ba513bcc4d44d0220dbd764bf70da21ef43a67f036a2102d4852c5129c102450b75e2c7_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1745dd05-13d6-31ec-b38c-e7311e566851",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_pounds_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 12,
                  "endLine": 95,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    text = re.sub(_pounds_re, r'\\1 pounds', text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "25f46649a6b640c428c2ce5d442d5d090716b3ea483a155f558d55e797fbefe68b60a1cb510c7cc1afbe5382e6cec1afe73e0b6dbba6cf0f4863637a0c796096_0"
          },
          "properties": {}
        },
        {
          "ruleId": "47a8c802-374e-37b0-ab4f-9a2ef4b73c88",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_dollars_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 12,
                  "endLine": 96,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    text = re.sub(_dollars_re, _expand_dollars, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f72ae638af4b4edd7b4b35e04c58a9256f6ba1c1b5b10df9de76dcc910a2f8799cf4e5a1406f25da285e71c3f41f65c6f8379fc985b48b82389f917d8637faa2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "40b0c0fd-be77-3c84-a3df-1209e50567c1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_decimal_number_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 12,
                  "endLine": 97,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    text = re.sub(_decimal_number_re, _expand_decimal_point, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "dc2214eb515fd08757d1fdf6f35c41a653e84d4aaf97bfd4e5b3e623a31cfb552ddf02c043b2ba87b5a98dbf116dce2cb0dd5ba9a00591e11d719f3e3298ad5b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "648a7a3f-a3eb-3d89-82cc-07695263fc3a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_ordinal_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 12,
                  "endLine": 98,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    text = re.sub(_ordinal_re, _expand_ordinal, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a7fd78658e3b550086473cb9ecf1c80981b352fee8c5a03a250ba967c8d41c96c0744444f25b383799bb604f7569aa0f9cfbc7fae5f23986705e8e00a0dd9262_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1c1b3062-50dd-3ef9-ab35-3aa738b6b62f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_number_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 12,
                  "endLine": 99,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    text = re.sub(_number_re, _expand_number, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a1246bd769f97af406265a386ba1800ffbfbd0d4cc73a98f65f655634bdeede6398ddf6144fdd65bfc739779d3a4b73d1f548742fb9c4620b9383b65aeabd627_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8a6edcca-434d-34d3-bcf4-e65bd3f0e628",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_time_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/parts/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 12,
                  "endLine": 100,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    text = re.sub(_time_re, _expand_time, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a053f4393964944feccd2092d903857853ecc3b2fc748130d492eff7c24ab3dbbce6a5b58d24a9febcf93daa77f3105a06a19caf0cde9abe5493fb3c7b06ff6f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ca6060ae-e263-351e-a2ad-0d1d48676e22",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/utils/download_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 9,
                  "endLine": 35,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    r = requests.get(url, stream=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2deb123206822c0b98e2089edd2df93eed7cc9de1b2055c178d4758df93a83385f8f0d902f72da1ce1371d09903928e9046d6ab75b93c902a72b48529452fb55_0"
          },
          "properties": {}
        },
        {
          "ruleId": "57953ff9-cd6c-35b7-a859-30790f5e6b5b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/utils/download_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 17,
                  "endLine": 51,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    file_hash = hashlib.md5()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "20763a0d3182281661ffbdf0bd77ce9d0644a109617a9188cefcd223730185bf4aa5c66157b9a60aa8e7ea70cad70e39f4bcd2a5d2549ae8710659f1aab91b4a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "cade9b73-d729-3c3c-b9b3-6b5d0573e065",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch/utils/download_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 10,
                  "endLine": 69,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    with tarfile.open(fpath, mode) as tar:\n        members = tar.getmembers()\n        for member in tqdm.tqdm(iterable=members, total=len(members), leave=True):\n            tar.extract(path=dest_folder, member=member)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "258066f774a25dbeb56494e4fbd9514ee989b178a36776c1c91e16985db4d05ca562b678c17232657d9186595461a8259ae7c5b67c6c1710933a49b34ce0be8c_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4cd3e327-b1f5-3f1e-97b7-82f9da2025c5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/inference/pytorch_SUT.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 36,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    checkpoint = torch.load(ckpt_path, map_location=\"cpu\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "84afb0084db30eaee9f24d7ee657035370fd12d141d5359e08978a710fc9d07303cfeb789fc4df2ff9640d1c764b07456626b058ce443046e912b6eab880fcbf_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0ce42319-94e4-3d3a-9cc4-4b30a74cd3e0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The package cache was not deleted after running 'apt-get update', which increases the size of the image. Remove the package cache by appending '&& apt-get clean' at the end of apt-get command chain."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "endLine": 20,
                  "endColumn": 19,
                  "snippet": {
                    "text": "RUN apt-get update && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c61ffd34ba26e1c9c056af899ca1139716293d0414018d5ee23f1c3288459c5b854e71f80682bf5257a2aa0d1bc96b09b01a04a2a1f296485add80e08a931b93_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4638c366-33b5-3ce8-9e27-64b460c546fe",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not work as expected in a conatiner."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "endLine": 27,
                  "endColumn": 7,
                  "snippet": {
                    "text": "RUN COMMIT_SHA=f546575109111c455354861a0567c8aa794208a2 && \\\n    git clone https://github.com/HawkAaron/warp-transducer deps/warp-transducer && \\\n    cd deps/warp-transducer && \\"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ddc3cd8e0bdaec6b04cfb6b4e3d270b5b50a7fa61ac089d31ff27f2464697df045369bde25d966312d9f62ed9a02824857bb019d78341e479512a04f0ed030d3_0"
          },
          "properties": {}
        },
        {
          "ruleId": "5e47af5a-b30d-3a17-9ef3-284bdc3373c8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 1,
                  "endLine": 51,
                  "endColumn": 25,
                  "snippet": {
                    "text": "RUN pip install --global-option=\"--cpp_ext\" --global-option=\"--cuda_ext\" https://github.com/NVIDIA/apex/archive/8a1ed9e8d35dfad26fb973996319965e4224dcdd.zip"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4a46b40cba7059778033223eecf2ca81780dd23b15e7da29418168038b04bde0d633f28bb45fed06cfdf3ff27b7bd979b40089d7f2c1eaac81edb498630f7658_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6596803b-98a9-3ee5-86a4-c31c3f8f1e67",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "This 'pip install' is missing '--no-cache-dir'. This flag prevents\npackage archives from being kept around, thereby reducing image size.\nAdd '--no-cache-dir'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/Dockerfile",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 1,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "RUN pip install --no-cache --disable-pip-version-check -U -r requirements.txt"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d4043da1af6ac9ab11b40fbe8a6174cc1866d827651bfbbc23789de0c779f02c74b88367d8402837eaca929ef578d9ee3b82c3dafb1bb0ace1c13a06f47d0404_1"
          },
          "properties": {}
        },
        {
          "ruleId": "246c2f46-1f7e-3afa-8360-18a0ee879b2d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/data/torchaudio/an4.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    with os.popen('find %s -type f -name \"*.raw\"' % train_path) as pipe:"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5a89a3c008517420d548b3cec8e305a4168ee6b19c789d6ba954df384cef85ad083d142ad38915c3865f4483b3d9b8c86ecfe7cc3012a6cf715140ac48f58e9b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "392a1dbc-9f0e-3280-a0e1-13c5be685283",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/data/torchaudio/an4.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 13,
                  "endLine": 44,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            os.system(cmd)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5a89a3c008517420d548b3cec8e305a4168ee6b19c789d6ba954df384cef85ad083d142ad38915c3865f4483b3d9b8c86ecfe7cc3012a6cf715140ac48f58e9b_1"
          },
          "properties": {}
        },
        {
          "ruleId": "c12a1b9b-1b7a-345e-9327-adcf5f86d968",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'epoch(\\d+)_'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 18,
                  "endLine": 139,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            (int(re.search('epoch(\\d+)_', f).group(1)), f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ce4527e6e849daff175f56a3f76a5444197cbd8ebdba8f3156b733604c9dcaea00657e58dc0d439bb1188cf26dfe63a0e1cc9094e143f5c22f3ce1f052619f6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "3bf7f541-b35a-3815-93c2-c07f51f5a326",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/data/torchaudio/librispeech.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 13,
                  "endLine": 89,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            tar = tarfile.open(target_filename)\n            tar.extractall(split_dir)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b17a8a1043cc0475996c1d09aff437fad5e19eaac2876c81324e04b78b5bed2fde78cbea65408e7f62054708db552bb75a25948d4e8817a2c56e32502bd8ef81_0"
          },
          "properties": {}
        },
        {
          "ruleId": "25c3efec-7b26-3cdb-b1c7-9bbd935ec7da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        tracked = sorted(tracked, key=lambda t: t[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "22ac73555659acacef94b8819db6ca8062375ea0920c7273fa52ba11fc5842bd9f4c068508a4f21f4dcd7b282ddf2cd42386fc40cd9d82a732a65de06379f2d8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8166de8c-1399-3199-ba3f-ae2ec7007a5a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 9,
                  "endLine": 189,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        torch.save(state, fpath)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebb7715970c1a01ef4304853644a32d494e3d3f5ed3f62b6a44c7c701cd27734a5f8c39ed9fef8808868029c6e6dab51d821c2857a04dc9acb9b6c8291cff7db_0"
          },
          "properties": {}
        },
        {
          "ruleId": "35fbb675-1944-3502-a7de-5603340ddc84",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 17,
                  "endLine": 206,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                torch.load(tracked[-1], map_location='cpu')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebb7715970c1a01ef4304853644a32d494e3d3f5ed3f62b6a44c7c701cd27734a5f8c39ed9fef8808868029c6e6dab51d821c2857a04dc9acb9b6c8291cff7db_1"
          },
          "properties": {}
        },
        {
          "ruleId": "6e9225fe-d3a2-3c1c-b2eb-4e0fa84a0ec1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/helpers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 22,
                  "endLine": 219,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        checkpoint = torch.load(fpath, map_location=\"cpu\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ebb7715970c1a01ef4304853644a32d494e3d3f5ed3f62b6a44c7c701cd27734a5f8c39ed9fef8808868029c6e6dab51d821c2857a04dc9acb9b6c8291cff7db_2"
          },
          "properties": {}
        },
        {
          "ruleId": "90e08b17-da73-3680-a559-8743bdd0b7b2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'\\.(\\d+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/tb_dllogger.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 25,
                  "endLine": 80,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    saved = sorted([int(re.search('\\.(\\d+)', f).group(1))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "b675ea60002dc8ab5dbc2702ec9d6004e8b4de3ff2cfd5bc51be78b3253677f2e0f66001687d091924b532c7731ea3d611f009f7bdb844d4578fe14605b706c0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "825d3fa7-154b-38c4-93b0-726d9bb7e8f5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\s+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 18,
                  "endLine": 38,
                  "endColumn": 36,
                  "snippet": {
                    "text": "_whitespace_re = re.compile(r'\\s+')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "48208c583d7117c2fe141361b3d2f2747761e78a63a8afef3d4212cce9e6294f1bf187d2c361b34862b8e8605f2631b19362c30b9e38b5417547bad2661b5f82_0"
          },
          "properties": {}
        },
        {
          "ruleId": "02133fb5-263c-350d-9e5a-82b9cc51b44e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `'\\\\b%s\\\\.' % x[0]` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 20,
                  "endLine": 41,
                  "endColumn": 64,
                  "snippet": {
                    "text": "_abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in ["
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "bd32a5704e5d44de0ffccca2974142a9cacd2e913cf2023aa9b304b34a117808b481d39ecba6f1d07918cc0e22b2715ed839465414a9169be8d4f9c775c695f1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "681b57f6-2d34-3c7d-8b6c-8077858cfbb1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `regex` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 16,
                  "endLine": 64,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        text = re.sub(regex, replacement, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d198831fe4191180157e41b8f36a1228386c90688a868e6256b92f4751ff51c53ec7237a3f37c01710f61714b8338d67928181ce8ed6be4d5d3f93f5b77f4ce1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8a63af58-973a-3959-af14-93a4a5174aac",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_whitespace_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 12,
                  "endLine": 74,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    return re.sub(_whitespace_re, ' ', text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a4cc372f809a67df297b9d6a3d318153c62d4b7d3bb807ed154d12bdb2cee0d2923f57c0f898e4efedae80a65c6c56c3d39b27e22a999c0e863840f14e85e391_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7bfa5fa9-5e5d-3cd5-bc62-0e3af3f10fa3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'&'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 12,
                  "endLine": 81,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    text = re.sub(r'&', \" and \", text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "068a754eb8f9b6e22bc4c4260d43554e956cda1b5655d31a84db27dd2e28d39930df0ed37f27801b895a489a87828db8a78073075a39371dbd9507c3497b9aa1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "858e3efe-d43c-3d0f-8a64-927595185e1b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/cleaners.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 12,
                  "endLine": 82,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    text = re.sub(r'\\+', \" plus \", text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7d6ddf81dc0c49ecfdcac597dffd41c2788a56cd0bcf03097d950ac6fce1568709492017ec8fd9fcc267524d7a0e497e2dfc6497022b3f55fe67bc7f0afb2ed5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "07da125a-bee1-3578-84cc-eb8e02f2201d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([0-9][0-9\\,]+[0-9])'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 20,
                  "endLine": 24,
                  "endColumn": 55,
                  "snippet": {
                    "text": "_comma_number_re = re.compile(r'([0-9][0-9\\,]+[0-9])')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0ea0913deb121bfdbd448c3bd03ca91fc5e0b15199dc15d8534113123b66b7f385cc5deecc54b4c9a1807b57501190b771d2e4fb6d96f243f856ab2f4b488625_0"
          },
          "properties": {}
        },
        {
          "ruleId": "16495f9a-effe-3a06-95c3-54b7ddfaeb57",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([0-9]+\\.[0-9]+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 22,
                  "endLine": 25,
                  "endColumn": 53,
                  "snippet": {
                    "text": "_decimal_number_re = re.compile(r'([0-9]+\\.[0-9]+)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "37b1d972d31134f29df1ab965975d5888dbfd6800abc00def68c9aa4c7ddf46d9133f6aa6f8333eff805fd62e1dd37927a7f910a303c73b3de31ff37d7c69f8d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "6ca8dd61-ee3b-3f58-9c10-9ce78cdd045e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'Â£([0-9\\,]*[0-9]+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 14,
                  "endLine": 26,
                  "endColumn": 47,
                  "snippet": {
                    "text": "_pounds_re = re.compile(r'Â£([0-9\\,]*[0-9]+)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e4ca2fd4a2459e9cecc92208677d3fe000419a62ca3c8081ff8c4025b24a85dd5223c19180bad622df473fba75eff0bc2ce80d66e690ee89ec2ebdc24252a3c0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af8a3bc4-10f0-3f30-a22f-f522b77c7f2d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'\\$([0-9\\.\\,]*[0-9]+)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "endLine": 27,
                  "endColumn": 50,
                  "snippet": {
                    "text": "_dollars_re = re.compile(r'\\$([0-9\\.\\,]*[0-9]+)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "2e8059c07215e73e6303ddf2570c282825d4d96096dc9205cdeb09dcf851fa893d2b7d84aeeb94bda99565859242c1c65062bf39aef57ec781cec532105d7279_0"
          },
          "properties": {}
        },
        {
          "ruleId": "148917ae-fccd-3530-bf3d-f10ba0a3570a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'[0-9]+(st|nd|rd|th)'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 15,
                  "endLine": 28,
                  "endColumn": 49,
                  "snippet": {
                    "text": "_ordinal_re = re.compile(r'[0-9]+(st|nd|rd|th)')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7e04b3d1a5edc9722b875eca22dfe3c861790081a493c3d19d635c1e5782507de04570ad14db08c53cd0dbcd4e14f6b28d9440d5d459967fb11a7e5f6bf98885_0"
          },
          "properties": {}
        },
        {
          "ruleId": "51958fbd-fae0-39e4-9f5d-f2514e395772",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'[0-9]+'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 14,
                  "endLine": 29,
                  "endColumn": 35,
                  "snippet": {
                    "text": "_number_re = re.compile(r'[0-9]+')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "06b9f74bc61b0b5ce84d569f5cd0b06bf97c3d03fd2c3c6253c3c3ae64c3eeecabc486541025e07c8ab381eaa2053f4e97238ce22cb7e1ecf4f09cab13dff38f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "aa3da0ac-1874-3d22-9a9e-e193008ce9b8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'([0-9]{1,2}):([0-9]{2})'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "endLine": 30,
                  "endColumn": 50,
                  "snippet": {
                    "text": "_time_re = re.compile(r'([0-9]{1,2}):([0-9]{2})')"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5669386d4d50911741edf7f0074e69c010ad13cfbcdea1e55552bfceb5235ce65adb5315643a8aa49524531f0778a4940f3bcda8ced049ad59c2be581f24fa3f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d7e96ba4-e232-3d67-bce3-c7dd475a4f07",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_comma_number_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 12,
                  "endLine": 92,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    text = re.sub(_comma_number_re, _remove_commas, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "92c557eb00dc002bf7349c2f82e13e7ea339a35b67708dd3beb79601d2a1397159e06f205fddeed354839a260c2563403c061cb9314032073cbc57f1e6acc9f6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "bcd05f45-d254-3161-aab2-ad946950ce30",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_pounds_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 12,
                  "endLine": 93,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    text = re.sub(_pounds_re, r'\\1 pounds', text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7300bd794ed57b45446caaf8723f93b683856f6314e32b33ed34d8db9a2de806a8bc77a1714b0140bac8c0bdf873df369545375b6a2a38ed7fae0a060075b066_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fede1c29-e417-3aa8-aa50-8a569a96bb2f",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_dollars_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 12,
                  "endLine": 94,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    text = re.sub(_dollars_re, _expand_dollars, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "856a1971f97fdebe5e455e161bd3a2dc992494506105a10143bb96fc418139617594671f27390f9b15ee7ed7a804112d9c93da9fc58b2952f9ae67922261ee9a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c61ceb7b-20dc-3ca7-9650-0967334c72bc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_decimal_number_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 12,
                  "endLine": 95,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    text = re.sub(_decimal_number_re, _expand_decimal_point, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "56715476fbd38179b859fd3de89fa5cb75f2736f72a74282c8bc8f52a387b506a3408cb1a3f10db7117ed22b5aa21d6e3cfb437da6a1946f5fed0d62b99fdb1d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b824a02e-c6c0-3222-9cc7-0011cb295478",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_ordinal_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 12,
                  "endLine": 96,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    text = re.sub(_ordinal_re, _expand_ordinal, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "558f92119e6e0311a40888fe544cd0e3864f225e31922c909469fcd41cf682f9c670f2a356e6d2accaa96caeacd4f629c4a06d5a632f5057dd08e0f25dfdd862_0"
          },
          "properties": {}
        },
        {
          "ruleId": "23d31d2a-f1bc-3143-8108-533eb209ad64",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_number_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 12,
                  "endLine": 97,
                  "endColumn": 52,
                  "snippet": {
                    "text": "    text = re.sub(_number_re, _expand_number, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e9ef8d9d2d11515f3a4dd5afc553cb8302caa74524db09d1fdfab4934ff4272f65b47b0938691f45ea722ee6cf2d9dce07c00ee8b30a7d686086c85f5019d7e9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "17ff6cef-dbf3-3c88-8fe3-a9aeabf624c0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_time_re` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/common/text/numbers.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 12,
                  "endLine": 98,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    text = re.sub(_time_re, _expand_time, text)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ddddbf112a977699df4d4537619007fb7aa55ad256d008abdaa9d37f550248cf75e893abc7d5684df555ded27171f96bd3f760efe5baff9eaf8ffb279fcc4fa8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0991ab5a-88be-3f94-b34e-8e791c119126",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Functions reliant on pickle can result in arbitrary code execution.  Consider loading from `state_dict`, using fickling, or switching to a safer serialization method like ONNX"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/inference.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 22,
                  "endLine": 207,
                  "endColumn": 63,
                  "snippet": {
                    "text": "        checkpoint = torch.load(args.ckpt, map_location=\"cpu\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f2df0ddba399d68b3528301fa881de4b30eb443370b0a8454f33d92dbd98510ff40b4ce77b66275c9ae33a4dc6c3877b256e3714050ac3d12ebeab1d4ba3850a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ce7b9781-ecb5-317d-9eba-869de78c46d4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "There's an HTTP request made with requests,\nbut the raise_for_status() utility method isn't used.\nThis can result in request errors going unnoticed\nand your code behaving in unexpected ways,\nsuch as if your authorization API returns a 500 error\nwhile you're only checking for a 401."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/utils/download_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 34,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    r = requests.get(url, stream=True)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f0969dae1c78d3e9f2a4daeb179ac601179bc1ec2f336856d894ac5a1be276ccb7ff607bbc87d15dbb43a03044f971ef29ee717cc30ff53af7f9eef7b25a5cee_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0084d112-124c-3ef2-859f-118417381ab3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not\ncollision resistant and is therefore not suitable as a cryptographic\nsignature. Use SHA256 or SHA3 instead.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/utils/download_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    file_hash = hashlib.md5()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1134929d17f909cad82446c3f2803dab07bb64d320530b2bb08bd010680706d2d11533bad0147345adb6dec36ca59bde770d5cf924ed8efe32ddf1712745275a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "33a03276-d141-3639-86fc-eb3632709b76",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The Python 'tarfile' extract|extractall functions are vulnerable to arbitrary file overwrites"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "benchmarks/rnnt/ootb/train/utils/download_utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 10,
                  "endLine": 68,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    with tarfile.open(fpath, mode) as tar:\n        members = tar.getmembers()\n        for member in tqdm.tqdm(iterable=members, total=len(members), leave=True):\n            tar.extract(path=dest_folder, member=member)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "83ba8c1a642b4e57bf4033ead03f03fab68959e59dcf4c01d64524f3a4c4b45689821fbb974188585857999504cf7095e1fcbddebe049622fa2ee576f6ace9ca_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d8187002-dbc0-3b1d-8a60-345f6a787426",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `regex` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bmlogging/result_summarizer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 15,
                  "endLine": 45,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    row_lst = re.findall(regex, log_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff159a407590e7fedb8fd46c28ace330338e785ffff1d70f514fcec9a1a81e418c1c0ecb9fdac54db4d18f7dae86d71057a99043fc437e307cd7d89b22b21f90_0"
          },
          "properties": {}
        },
        {
          "ruleId": "02c0d803-7eee-3423-8eab-d7e7ff5ec27d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `regex` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bmlogging/result_summarizer.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 11,
                  "endLine": 56,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    row = re.search(regex, log_str)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ff159a407590e7fedb8fd46c28ace330338e785ffff1d70f514fcec9a1a81e418c1c0ecb9fdac54db4d18f7dae86d71057a99043fc437e307cd7d89b22b21f90_1"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}